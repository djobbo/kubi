/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as CalcImport } from './routes/calc'
import { Route as IndexImport } from './routes/index'
import { Route as meBookmarksImport } from './routes/@me/bookmarks'
import { Route as socialTwitterImport } from './routes/(social)/twitter'
import { Route as socialGithubImport } from './routes/(social)/github'
import { Route as socialDonateImport } from './routes/(social)/donate'
import { Route as socialDiscordImport } from './routes/(social)/discord'
import { Route as StatsPlayerPlayerIdImport } from './routes/stats/player/$playerId'
import { Route as StatsClanClanIdImport } from './routes/stats/clan/$clanId'
import { Route as Rankings2v2SplatImport } from './routes/rankings/2v2.$'
import { Route as Rankings1v1SplatImport } from './routes/rankings/1v1.$'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const CalcRoute = CalcImport.update({
  id: '/calc',
  path: '/calc',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const meBookmarksRoute = meBookmarksImport.update({
  id: '/@me/bookmarks',
  path: '/@me/bookmarks',
  getParentRoute: () => rootRoute,
} as any)

const socialTwitterRoute = socialTwitterImport.update({
  id: '/(social)/twitter',
  path: '/twitter',
  getParentRoute: () => rootRoute,
} as any)

const socialGithubRoute = socialGithubImport.update({
  id: '/(social)/github',
  path: '/github',
  getParentRoute: () => rootRoute,
} as any)

const socialDonateRoute = socialDonateImport.update({
  id: '/(social)/donate',
  path: '/donate',
  getParentRoute: () => rootRoute,
} as any)

const socialDiscordRoute = socialDiscordImport.update({
  id: '/(social)/discord',
  path: '/discord',
  getParentRoute: () => rootRoute,
} as any)

const StatsPlayerPlayerIdRoute = StatsPlayerPlayerIdImport.update({
  id: '/stats/player/$playerId',
  path: '/stats/player/$playerId',
  getParentRoute: () => rootRoute,
} as any)

const StatsClanClanIdRoute = StatsClanClanIdImport.update({
  id: '/stats/clan/$clanId',
  path: '/stats/clan/$clanId',
  getParentRoute: () => rootRoute,
} as any)

const Rankings2v2SplatRoute = Rankings2v2SplatImport.update({
  id: '/rankings/2v2/$',
  path: '/rankings/2v2/$',
  getParentRoute: () => rootRoute,
} as any)

const Rankings1v1SplatRoute = Rankings1v1SplatImport.update({
  id: '/rankings/1v1/$',
  path: '/rankings/1v1/$',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/calc': {
      id: '/calc'
      path: '/calc'
      fullPath: '/calc'
      preLoaderRoute: typeof CalcImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/(social)/discord': {
      id: '/(social)/discord'
      path: '/discord'
      fullPath: '/discord'
      preLoaderRoute: typeof socialDiscordImport
      parentRoute: typeof rootRoute
    }
    '/(social)/donate': {
      id: '/(social)/donate'
      path: '/donate'
      fullPath: '/donate'
      preLoaderRoute: typeof socialDonateImport
      parentRoute: typeof rootRoute
    }
    '/(social)/github': {
      id: '/(social)/github'
      path: '/github'
      fullPath: '/github'
      preLoaderRoute: typeof socialGithubImport
      parentRoute: typeof rootRoute
    }
    '/(social)/twitter': {
      id: '/(social)/twitter'
      path: '/twitter'
      fullPath: '/twitter'
      preLoaderRoute: typeof socialTwitterImport
      parentRoute: typeof rootRoute
    }
    '/@me/bookmarks': {
      id: '/@me/bookmarks'
      path: '/@me/bookmarks'
      fullPath: '/@me/bookmarks'
      preLoaderRoute: typeof meBookmarksImport
      parentRoute: typeof rootRoute
    }
    '/rankings/1v1/$': {
      id: '/rankings/1v1/$'
      path: '/rankings/1v1/$'
      fullPath: '/rankings/1v1/$'
      preLoaderRoute: typeof Rankings1v1SplatImport
      parentRoute: typeof rootRoute
    }
    '/rankings/2v2/$': {
      id: '/rankings/2v2/$'
      path: '/rankings/2v2/$'
      fullPath: '/rankings/2v2/$'
      preLoaderRoute: typeof Rankings2v2SplatImport
      parentRoute: typeof rootRoute
    }
    '/stats/clan/$clanId': {
      id: '/stats/clan/$clanId'
      path: '/stats/clan/$clanId'
      fullPath: '/stats/clan/$clanId'
      preLoaderRoute: typeof StatsClanClanIdImport
      parentRoute: typeof rootRoute
    }
    '/stats/player/$playerId': {
      id: '/stats/player/$playerId'
      path: '/stats/player/$playerId'
      fullPath: '/stats/player/$playerId'
      preLoaderRoute: typeof StatsPlayerPlayerIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calc': typeof CalcRoute
  '/test': typeof TestRoute
  '/discord': typeof socialDiscordRoute
  '/donate': typeof socialDonateRoute
  '/github': typeof socialGithubRoute
  '/twitter': typeof socialTwitterRoute
  '/@me/bookmarks': typeof meBookmarksRoute
  '/rankings/1v1/$': typeof Rankings1v1SplatRoute
  '/rankings/2v2/$': typeof Rankings2v2SplatRoute
  '/stats/clan/$clanId': typeof StatsClanClanIdRoute
  '/stats/player/$playerId': typeof StatsPlayerPlayerIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calc': typeof CalcRoute
  '/test': typeof TestRoute
  '/discord': typeof socialDiscordRoute
  '/donate': typeof socialDonateRoute
  '/github': typeof socialGithubRoute
  '/twitter': typeof socialTwitterRoute
  '/@me/bookmarks': typeof meBookmarksRoute
  '/rankings/1v1/$': typeof Rankings1v1SplatRoute
  '/rankings/2v2/$': typeof Rankings2v2SplatRoute
  '/stats/clan/$clanId': typeof StatsClanClanIdRoute
  '/stats/player/$playerId': typeof StatsPlayerPlayerIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/calc': typeof CalcRoute
  '/test': typeof TestRoute
  '/(social)/discord': typeof socialDiscordRoute
  '/(social)/donate': typeof socialDonateRoute
  '/(social)/github': typeof socialGithubRoute
  '/(social)/twitter': typeof socialTwitterRoute
  '/@me/bookmarks': typeof meBookmarksRoute
  '/rankings/1v1/$': typeof Rankings1v1SplatRoute
  '/rankings/2v2/$': typeof Rankings2v2SplatRoute
  '/stats/clan/$clanId': typeof StatsClanClanIdRoute
  '/stats/player/$playerId': typeof StatsPlayerPlayerIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/calc'
    | '/test'
    | '/discord'
    | '/donate'
    | '/github'
    | '/twitter'
    | '/@me/bookmarks'
    | '/rankings/1v1/$'
    | '/rankings/2v2/$'
    | '/stats/clan/$clanId'
    | '/stats/player/$playerId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/calc'
    | '/test'
    | '/discord'
    | '/donate'
    | '/github'
    | '/twitter'
    | '/@me/bookmarks'
    | '/rankings/1v1/$'
    | '/rankings/2v2/$'
    | '/stats/clan/$clanId'
    | '/stats/player/$playerId'
  id:
    | '__root__'
    | '/'
    | '/calc'
    | '/test'
    | '/(social)/discord'
    | '/(social)/donate'
    | '/(social)/github'
    | '/(social)/twitter'
    | '/@me/bookmarks'
    | '/rankings/1v1/$'
    | '/rankings/2v2/$'
    | '/stats/clan/$clanId'
    | '/stats/player/$playerId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalcRoute: typeof CalcRoute
  TestRoute: typeof TestRoute
  socialDiscordRoute: typeof socialDiscordRoute
  socialDonateRoute: typeof socialDonateRoute
  socialGithubRoute: typeof socialGithubRoute
  socialTwitterRoute: typeof socialTwitterRoute
  meBookmarksRoute: typeof meBookmarksRoute
  Rankings1v1SplatRoute: typeof Rankings1v1SplatRoute
  Rankings2v2SplatRoute: typeof Rankings2v2SplatRoute
  StatsClanClanIdRoute: typeof StatsClanClanIdRoute
  StatsPlayerPlayerIdRoute: typeof StatsPlayerPlayerIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalcRoute: CalcRoute,
  TestRoute: TestRoute,
  socialDiscordRoute: socialDiscordRoute,
  socialDonateRoute: socialDonateRoute,
  socialGithubRoute: socialGithubRoute,
  socialTwitterRoute: socialTwitterRoute,
  meBookmarksRoute: meBookmarksRoute,
  Rankings1v1SplatRoute: Rankings1v1SplatRoute,
  Rankings2v2SplatRoute: Rankings2v2SplatRoute,
  StatsClanClanIdRoute: StatsClanClanIdRoute,
  StatsPlayerPlayerIdRoute: StatsPlayerPlayerIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/calc",
        "/test",
        "/(social)/discord",
        "/(social)/donate",
        "/(social)/github",
        "/(social)/twitter",
        "/@me/bookmarks",
        "/rankings/1v1/$",
        "/rankings/2v2/$",
        "/stats/clan/$clanId",
        "/stats/player/$playerId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/calc": {
      "filePath": "calc.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/(social)/discord": {
      "filePath": "(social)/discord.tsx"
    },
    "/(social)/donate": {
      "filePath": "(social)/donate.tsx"
    },
    "/(social)/github": {
      "filePath": "(social)/github.tsx"
    },
    "/(social)/twitter": {
      "filePath": "(social)/twitter.tsx"
    },
    "/@me/bookmarks": {
      "filePath": "@me/bookmarks.tsx"
    },
    "/rankings/1v1/$": {
      "filePath": "rankings/1v1.$.tsx"
    },
    "/rankings/2v2/$": {
      "filePath": "rankings/2v2.$.tsx"
    },
    "/stats/clan/$clanId": {
      "filePath": "stats/clan/$clanId.tsx"
    },
    "/stats/player/$playerId": {
      "filePath": "stats/player/$playerId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
